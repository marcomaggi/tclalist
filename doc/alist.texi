\input texinfo.tex
@c $Id: alist.texi,v 1.12 2003/09/12 17:45:55 marco Exp $
@c %**start of header
@setfilename alist.info
@settitle Alist
@c %**end of header

@syncodeindex tp cp
@syncodeindex fn cp

@include version.texi

@c ------------------------------------------------------------

@ifinfo
@macro tclcmd{NAME}
[\NAME\]
@end macro
@end ifinfo

@ifnotinfo
@macro tclcmd{NAME}
@code{[\NAME\]}
@end macro
@end ifnotinfo


@macro tclvar{NAME}
@code{\NAME\}
@end macro

@macro tclcode{CODE}
@code{[\CODE\]}
@end macro


@c ------------------------------------------------------------
@titlepage
@title Alist
@subtitle Version @version{}
@author Marco Maggi
@page
@vskip 0pt plus 1filll
@noindent
This document is copyright @copyright{} 2002, 2003 by Marco Maggi. 

Permission is granted to make and distribute verbatim copies of this
document provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
document under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
@ignore

Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
@end titlepage


@c ------------------------------------------------------------
@ifinfo
@dircategory Development
@direntry
* Alist: (alist).               Treat lists as key/value pairs sequences. 
@end direntry
@end ifinfo


@c ------------------------------------------------------------
@ifnottex
@node Top
@top Alist @version{}

@noindent
@emph{Alist} is a C language extension library for TCL.  It provides
additional commands to a TCL interpreter.

This package implements a set of experimental commands to access a list
of elements as key/value pairs. All the commands are created in the
@code{alist} namespace.

     
@menu
* Copying::                     Copying this document. 
* Overview::                    Overview of the library. 
* Format::                      What's an alist and what's his format. 
* TCL API::                     The TCL commands.
* C API::                       The C language functions.
* Concept Index::               An entry for each concept. 
@end menu
@end ifnottex


@c ------------------------------------------------------------
@node Copying
@chapter Copying this document

@noindent
This document is copyright @copyright{} 2002, 2003 by Marco Maggi.

Permission is granted to make and distribute verbatim copies of this
document provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
document under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.


@c ------------------------------------------------------------
@node Overview
@chapter Overview of the library

@noindent
This file documents @emph{Alist} @version{}.  This package adds some
commands to a Tcl interpreter.

The purpose of this library is to provide an experimental package to do
some test, particularly on the packaging infrastructure (@acronym{TEA}).

The concept of this library is to test the feasibility/utility of
treating a list as a sequence of key/value pairs.  That is: access a
list as an associative array. This is obviously slow for big lists, but
can be used to store little data structures with a fixed set of keys.

This addresses two ``problems'': arrays consumes a lot of memory, it's
boring to configure an array to raise an error if we try to set an
invalid key.


@c ------------------------------------------------------------
@node Format
@chapter What's an alist and what's his format


@noindent
An ``alist'' (association list) is a collection of key/value pairs; it
can be treated as a linear implementation of an associative array. The
layout of an alist is as follows:

@example
@{ KEY1 VALUE1 KEY2 VALUE2 ... @}
@end example

Values are set and extracted selecting the corresponding key. An alist
data portion as an even number of elements; but if the number of
elements is odd, the last is treated as a list of properties and ignored
by non--property related commands.

At present the property list handling is not implemented yet.


@c ------------------------------------------------------------
@node TCL API
@chapter The @acronym{TCL} commands


@noindent
By default the single command @tclcmd{alist} is added to the global
namespace; but, if the @code{--enable-namespace} option is used with the
@command{configure} script at compile time, all the subcommands are
created in the @code{::alist} namespace.

@menu
* Set and get::                 Setting and getting values. 
* Inspection::                  Inspecting an alist.
* Misc::                        Miscellaneous commands.
@end menu


@c ------------------------------------------------------------
@node Set and get
@section Setting and getting values


@deffn Command assign @var{alist} @var{key} @var{value}
@deffnx Command {alist assign} @var{alist} @var{key} @var{value}
Sets a new element for the value associated with a key in an alist.
This command treats @var{alist} as a sequence of key/value pairs.  The
value associated with @var{key} is replaced with @var{value}. Returns
the new list.
@end deffn


@deffn Command at @var{alist} @var{key}
@deffnx Command {alist at} @var{alist} @var{key}
Returns the value associated with a key in an alist.  This command
treats @var{alist} as a sequence of key/value pairs. It looks for the
@var{key} element and returns the element next to it.
@end deffn



@c ------------------------------------------------------------
@node Inspection
@section Inspecting an alist

@noindent
The following commands are declared in the @code{alist} namespace.


@deffn Command names @var{alist}
@deffnx Command {alist } @var{alist}
Gets the list of keys in an alist.  This command treats @var{alist} as a
sequence of key/value pairs.  Returns the set of keys, that is: all the
elements located at even positions.  If @var{alist} has an odd number of
elements, the last is ignored.
@end deffn


@deffn Command values @var{alist}
@deffnx Command {alist values} @var{alist}
Gets the list of values in an alist. This command treats @var{alist} as
a sequence of key/value pairs.  Returns the set of values, that is all
the elements located at odd positions.  If @var{alist} has an odd number
of elements, the last is ignored.
@end deffn


@c ------------------------------------------------------------
@node Misc
@section Miscellaneous commands


@deffn Command version
@deffnx Command {alist version}
Returns the version number of the library.
@end deffn


@c ------------------------------------------------------------
@node C API
@chapter The C language functions



@deftypefun int AList_ObjAssign (@var{interp}, @var{alistPre}, @var{key}, @var{value}, @var{alistPost})
Sets a new value for the element associated with a key.

Arguments:

@table @code
@item Tcl_Interp *@var{interp}
interp used to report errors;

@item Tcl_Obj *@var{alistPre}
ptr to the list of objects;

@item Tcl_Obj *@var{key}
ptr to the key object;

@item Tcl_Obj *@var{value}
ptr to the new value;

@item Tcl_Obj ** @var{alistPost}
ptr to a target variable that will hold the new alist;
@end table

Returns @code{TCL_OK} or @code{TCL_ERROR}.  If shared the alist is
duplicated; the object referenced by @var{alistPost} has @code{refCount}
equal to that of @code{*@var{alistPre}} or equal to zero.
@end deftypefun


@deftypefun int AList_Assign (@var{interp}, @var{alistPre}, @var{key}, @var{value}, @var{alistPost})
Like @code{AList_ObjAssign()}, but @var{key} is a @code{CONST char *}.
@end deftypefun


@deftypefun int AList_ObjAt (@var{interp}, @var{alist}, @var{key}, @var{value})
Extracts the value associated to a given key.

Arguments:

@table @code
@item Tcl_Interp *@var{interp}
interp used to report errors;

@item Tcl_Obj *@var{alist}
pointer to the alist object;

@item Tcl_Obj *@var{key}
pointer to the key object;

@item Tcl_Obj **@var{value}
ptr to a target variable.
@end table

Returns @code{TCL_OK} or @code{TCL_ERROR} if the key is not present.
The result object has reference counter untouched.
@end deftypefun


@deftypefun int AList_At (@var{interp}, @var{alist}, @var{key}, @var{value})
Like @code{AList_ObjAt()}, but @var{key} is a @code{CONST char *}.
@end deftypefun


@deftypefun int AList_GetNames (@var{interp}, @var{alist}, @var{namesPtr})
Extracts all the key objects from an alist.

Arguments:

@table @code
@item Tcl_Interp *@var{interp}
interp used to report errors;

@item Tcl_Obj *@var{alist}
ptr to the alist object;
@item Tcl_Obj **@var{namesPtr}
ptr to a target variable that will hold the result.
@end table

Returns @code{TCL_OK} or @code{TCL_ERROR}.The result object has
@code{refCount} left to zero.
@end deftypefun


@deftypefun int AList_GetValues (@var{interp}, @var{alist}, @var{valuesPtr})
Extracts all the values in the alist, that is: a list holding elements
number 1, 3, 5, @dots{}

Arguments:

@table @code
@item Tcl_Interp *@var{interp}
interp used to report errors;

@item Tcl_Obj *@var{alist}
ptr to the alist;

@item Tcl_Obj **@var{valuesPtr}
ptr to a target variable that will hold the result.
@end table

Returns @code{TCL_OK} or @code{TCL_ERROR}. The result object has
@code{refCount} left to zero.
@end deftypefun


@c ------------------------------------------------------------
@node Concept Index
@appendix An entry for each concept
     
@printindex cp

@contents
@bye

@c end of file
@c Local Variables:
@c mode: texinfo
@c page-delimiter: "^@c -+$"
@c End:
